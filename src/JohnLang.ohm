JohnLang {

	Program 	       = Stmt+
    Stmt           = VarDec
    			         | PrintStmt
                   | WhileStmt
                   | IfStmt
                   | ForStmt
                   | AssignmentStmt
                   | Exp_id "++" "!"									--increment
    
    VarDec         = (string | number | bool) id ":" Exp "!"
    PrintStmt      = print "(" Exp ")" "!"
    AssignmentStmt = Exp_id ":" Exp "!"
    Block          = "{" Stmt* "}"
    
    IfStmt         = if Exp Block ElseIfChain? ElseStmt?
    ElseIfChain    = ElseIfStmt+
    ElseIfStmt     = elseIf Exp Block
    ElseStmt       = else Block
    
    WhileStmt      = while Exp Block
    ForStmt        = for AssignmentStmt "," Exp "," Stmt Block
    
    
    Exp            = numeral
                   | id                 -- id
    	           | stringLiteral
                   | "(" Exp ")"        -- parens

    boolExp		     = (true | false)
        
   	bool 		       = "switcheroo" ~idchar
    string         = "chitchat" ~idchar
    number         = "handful" ~idchar
    if             = "ope" ~idchar
    elseIf         = "ope welp" ~idchar
    else           = "welp" ~idchar
    true           = "youBetcha" ~idchar
    false          = "thinkAgainPal" ~idchar
    not            = "nah" ~idchar
    return         = "betterGetGoin" ~idchar
    for            = "tilTheCowsComeHome" ~idchar
    while          = "holdMyBeer" ~idchar
    break          = "letsBlowThisPopsicleStand" ~idchar
    continue       = "letsNotGetCarriedAway" ~idchar
    function       = "gitErDone" ~idchar
    print          = "letMeLearnYouSomething" ~idchar
    class          = "doohickey" ~idchar
    constructing    = "slapTogether" ~idchar
    new            = "whipUp" ~idchar
    self           = "me" ~idchar
    list           = "todo" ~idchar
    dictionary     = "almanac" ~idchar 
    assert         = "whenPigsFly" ~idchar
    throw          = "whoopsieDaisy" ~idchar
    id             = ~keyword letter idchar*
    idchar         = letter | digit | "_"
    numeral        = digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
    stringLiteral  = "\"" (~"\"" any)* "\""   --doubleQuoted
    keyword        = bool  | string   | number   | if        | elseIf | else
    		           | true  | false    | not      | return    | for    | while 
                   | break | continue | function | print     | class  | constructing 
                   | new   | self     | list     | dictionary | assert | throw 

}



