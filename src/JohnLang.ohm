JohnLang {

    Program     = Statement+

    Statement   = VarDec
                | FunDec
                | Assignment
                | IfStmt
                | LoopStmt
                | Call "!"                                      --call
                | DotExp
                | DotCall
                | ClassDec
                | Return
                | break "!"                                     --break

    VarDec      = Type id ":" Exp "!"

    FunDec      = function id Params ":" Type Block
    Params      = "(" ListOf<Param, ","> ")"
    Param       = Type id

    Assignment  = ~literal Exp6 ":" Exp "!"

    IfStmt      = if Exp Block (elseif Exp Block)* (else Block)?

    IfStmtOld   = if Exp Block else Block                       --long
                | if Exp Block else IfStmt                      --elseif
                | if Exp Block                                  --short

    LoopStmt    = while Exp Block                                               --while
                | for (Type? id ":" Exp) "," (Exp) "," (Exp6 ":" Exp) Block     --for

    Call        = id "(" ListOf<Exp, ","> ")"

    DotCall     = Exp6 "." Call
    DotExp      = this "." id
                | Exp6 "." id

    ClassDec            = class id "{" ConstructorDec MethodDec* "}"
    ConstructorDec      = construct "(" ListOf<Param, ","> ")" "{" Field* "}"
    Field               = Type this "." id ":" Exp "!"
    MethodDec           = function id "(" ListOf<Param, ","> ")" ":" Type Block
    ObjectDec           = new id "(" ListOf<Exp, ","> ")"

    Block       = "{" Statement* "}"

    Return      = return Exp "!"                                --exp
                | return "!"                                    --short

    Exp         = Exp ("||" Exp2)+                              --or
                | Exp ("&&" Exp2)+                              --and
                | Exp2
    Exp2        = Exp3 relop Exp3                               --compare
                | Exp3
    Exp3        = Exp3 ("+" | "-") Exp4                         --add
                | Exp4
    Exp4        = Exp4 ("*"| "/" | "%") Exp5                    --multiply
                | Exp5
    Exp5        = Exp6 "**" Exp5                                --power
                | ("-" | not) Exp6                              --unary
                | Exp6
    Exp6        = true
                | false
                | floatlit
                | intlit
                | MapLit
                | Call
                | DotCall
                | DotExp
                | ObjectDec
                | Exp6 "[" Exp "]"                              --subscript
                | ArrayLit
                | stringlit
                | id
                | "(" Exp ")"                                   --parens

    Type        = id
    relop       = "<=" | "<" | "==" | "!=" | ">=" | ">"

    literal     = true | false | floatlit | intlit | stringlit
    floatlit    = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?
    intlit      = digit+
    stringlit   = "\"" char* "\""
    char        = ~"\\" ~"\"" any
                | "\\" ("n" | "t" | "\"" | "\\")                --escape
                | "\\u{" hex hex? hex? hex? hex? hex? "}"       --codepoint
    hex         = hexDigit

    ArrayLit    = "[" ListOf<Exp, ","> "]"
    MapLit      = "{" ListOf<MapLitEntry, ","> "}"
    MapLitEntry = Exp6 ":" Exp

    function    = "gitErDone" ~idchar
    if          = "ope" ~idchar
    elseif      = "ope welp" ~idchar
    else        = "welp" ~idchar
    for         = "tilTheCowsComeHome" ~idchar
    while       = "holdMyBeer" ~idchar
    class       = "doohickey" ~idchar
    this        = "me" ~idchar
    construct   = "slapTogether" ~idchar
    new         = "whipUp" ~idchar
    return      = "betterGetGoin" ~idchar
    break       = "letsBlowThisPopsicleStand" ~idchar
    continue    = "letsNotGetCarriedAway" ~idchar
    true        = "youBetcha" ~idchar
    false       = "thinkAgainPal" ~idchar
    not         = "nah" ~idchar

    id          = ~keyword letter idchar*
    idchar      = letter | digit | "_"

    keyword     = function | if | elseif | else | for | while | class | this | construct
                | new | return | break | continue | true | false | not

    space       += "//" (~"\n" any)*                            --comment
}
