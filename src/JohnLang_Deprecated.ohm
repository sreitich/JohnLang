JohnLang {

    Program 	   = Stmt+
    Stmt           = VarDec
    		       | FieldDec
    	           | ForLoopVarDec
    		       | PrintStmt
                   | WhileStmt
                   | IfStmt
                   | ForStmt
                   | AssignmentStmt
                   | ReturnStmt
                   | FunctionDec
                   | ConstructorDec
                   | ClassDec
                   | ObjectDec
                   | ErrThrowStmt
                   | ErrAssertStmt
                   | Exp "++" "!"						  --increment
                   | break "!"                            --break
    
    VarDec         = Type id ":" Exp "!"                                          --primitiveDeclaration
    		   | ListDec 
                   | DictDec
                   
    ListDec	   = Type Exp ":" "[" (Exp ("," Exp)*)? "]" "!"
    DictDec        = Type Exp ":" "{" (DictPair ("," DictPair))? "}" "!"
    DictPair 	   = Exp ":" Exp
    ForLoopVarDec  = Type id "=" Exp
    FunctionDec    = function Exp "(" ParamList? ")" ":" Type Block
    ParamList      = Param ("," Param)*
    Param          = Type id 
    ClassDec	   = class Exp Block
    ConstructorDec = construct "(" ParamList? ")" Block
    FieldDec       = Type FieldId ":" Exp "!"
    FieldId        = self ("." id)+
    ObjectDec	   = Exp Exp ":" new Exp "(" (Exp ("," Exp)*)? ")" "!"
    PrintStmt      = print "(" Exp ")" "!"
    AssignmentStmt = Exp ":" Exp "!"
    ReturnStmt     = return Exp "!"
    ErrThrowStmt   = throw Exp "!"
    ErrAssertStmt  = assert Exp "!"
    Block          = "{" Stmt* "}"
    
    IfStmt         = if Exp Block ElseIfChain? ElseStmt?
    ElseIfChain    = ElseIfStmt+
    ElseIfStmt     = elseIf Exp Block
    ElseStmt       = else Block
    
    WhileStmt      = while Exp Block
    ForStmt        = for Stmt "," Exp "," Exp "++" Block
    
    
    Exp            = ArithExp (CompOp ArithExp)?
  

    ArithExp       = ArithExp ("+" | "-") Term  				 -- binary
                   | Term
  

    Term           = Term ("*" | "/" | "%") Factor    				 -- binary
                   | Factor
  
    Factor         = Primary "**" Factor        				 -- power
                   | "-"? Primary               				 -- unary
  
  
    Primary        = numeral
                   | id                    
                   | stringLiteral
                   | "(" Exp ")"            					 -- parens
                   | BoolExp

    BoolExp        = (true | false)
    Type	   = (string | number | bool | list | dict)
    
    CompOp 	   = "==" | "<=" | ">=" | "<" | ">" | "!="
        
    bool 	   = "switcheroo" ~idchar
    string         = "chitchat" ~idchar
    number         = "handful" ~idchar
    list           = "todo" ~idchar
    dict           = "almanac" ~idchar
    if             = "ope" ~idchar
    elseIf         = "ope welp" ~idchar
    else           = "welp" ~idchar
    true           = "youBetcha" ~idchar
    false          = "thinkAgainPal" ~idchar
    not            = "nah" ~idchar
    return         = "betterGetGoin" ~idchar
    for            = "tilTheCowsComeHome" ~idchar
    while          = "holdMyBeer" ~idchar
    break          = "letsBlowThisPopsicleStand" ~idchar
    continue       = "letsNotGetCarriedAway" ~idchar
    function       = "gitErDone" ~idchar
    print          = "letMeLearnYouSomething" ~idchar
    class          = "doohickey" ~idchar
    construct      = "slapTogether" ~idchar
    new            = "whipUp" ~idchar
    self           = "me" ~idchar
    assert         = "whenPigsFly" ~idchar
    throw          = "whoopsieDaisy" ~idchar
    id             = ~keyword letter idchar*
    idchar         = letter | digit | "_"
    numeral        = digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
    stringLiteral  = "\"" (~"\"" any)* "\""   					  --doubleQuoted
    keyword        = bool  | string   | number   | if        | elseIf | else
    		   | true  | false    | not      | return    | for    | while 
                   | break | continue | function | print     | class  | construct 
                   | new   | self     | list     | dict      | assert | throw 

}
